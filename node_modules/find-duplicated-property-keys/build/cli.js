#!/usr/bin/env node
"use strict";

var _chalk = _interopRequireDefault(require("chalk"));

var _commandLineArgs = _interopRequireDefault(require("command-line-args"));

var _commandLineUsage = _interopRequireDefault(require("command-line-usage"));

var _fs = _interopRequireDefault(require("fs"));

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const sections = [{
  header: 'A tool for detecting duplicates in JSON files.',
  content: 'Lists all duplicated property keys followed by the number of their occurrence.'
}, {
  header: 'Options',
  optionList: [{
    alias: 'h',
    name: 'help',
    type: Boolean,
    typeLabel: '{underline boolean}',
    description: 'Print this usage guide.'
  }, {
    alias: 's',
    name: 'src',
    type: String,
    typeLabel: '{underline file}',
    description: 'The path to the JSON file. This parameter must be set to run this tool.'
  }]
}];
const options = (0, _commandLineArgs.default)(sections[1].optionList);

const runCli = options => {
  if (options == null || options.src == null) {
    console.log((0, _commandLineUsage.default)(sections));
    return 0;
  } else {
    const jsonFile = options.src;

    if (_fs.default.existsSync(jsonFile)) {
      if (_fs.default.lstatSync(jsonFile).isFile()) {
        const content = _fs.default.readFileSync(jsonFile).toString();

        const duplicatedPropertyKeys = (0, _index.default)(content);

        if (duplicatedPropertyKeys != null) {
          if (duplicatedPropertyKeys.length === 0) {
            console.log(_chalk.default.green(`No duplicated property keys found in ${options.src}.`));
            return 0;
          } else {
            console.error(_chalk.default.red(`The following duplicated property keys have been detected in ${options.src}:\n${duplicatedPropertyKeys.map(duplicatedPropertyKey => `${duplicatedPropertyKey} (${duplicatedPropertyKey.occurrence})`).join('\n')}`));
            return 101;
          }
        }
      } else {
        throw new Error(`Path ${jsonFile} does not point to a file.`);
      }
    } else {
      throw new Error(`File ${jsonFile} does not exist.`);
    }
  }
};

process.exit(runCli(options));